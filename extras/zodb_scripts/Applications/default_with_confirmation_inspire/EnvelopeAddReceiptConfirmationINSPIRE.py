# Script (Python) "EnvelopeAddReceiptConfirmationINSPIRE"
# bind container=container
# bind context=context
# bind namespace=
# bind script=script
# bind subpath=traverse_subpath
##parameters=workitem_id, REQUEST
# title=Add a confirmation of receipt
##
from DateTime import DateTime

list_of_obligations = []

for obl in list(context.getMySelf().dataflow_uris):
    list_of_obligations.append("""%s (<a href="%s">%s</a>)""" % (context.getMySelf().dataflow_lookup(obl)[
                               'TITLE'], obl.replace('eionet.eu.int', 'eionet.europa.eu'), obl.replace('eionet.eu.int', 'eionet.europa.eu')))
    #list_of_obligations.append("""<a href="%s">%s</a>""" % (obl, obl))
obligations_para = "<br/>\n".join(list_of_obligations)

l_ret = """
<p>
European Environment Agency<br />
Kongens Nytorv 6<br />
DK 1050 Copenhagen K
</p>
<p>In support of INSPIRE â€“ An Infrastructure for Spatial Information in the European Community</p>
<br />
<p><strong>To Whom It May Concern</strong></p>

<br />
<p>This confirmation letter shows the status of national submissions to Reportnet based on the European Reporting Obligation</p>

<p>INSPIRE Directive: %s</p>

<p>The letter is automatically generated when the authorised national data reporter has released the respective information inside the Central Data Repository (CDR).</p>

<p>
The following files have been submitted for country <strong>%s</strong> into the envelope <a href="%s"><strong>%s</strong></a> and are made publicly available on <strong>%s</strong>.
</p>


<p>List of files:</p>

<ol>""" % (obligations_para, context.getMySelf().getCountryName(), context.getMySelf().absolute_url(), context.getMySelf().title_or_id(), DateTime().strftime('%d %B %Y'))

documents_list = context.getMySelf().objectValues(
    ['Report Document', 'Report Hyperlink'])
documents_list.sort(key=lambda ob: ob.getId().lower())
for f in documents_list:
    l_ret += '<li>' + f.id + \
        ' (<a href="' + f.absolute_url() + '">' + f.absolute_url() + '</a>)</li>'
    if f.meta_type == 'Report Document':
        zip_files = context.getMySelf().getZipInfo(f)
        if zip_files:
            l_ret += '<div class="zip_content">'
            l_ret += '<em>files contained inside the ' + f.title_or_id() + ' archive:</em>'
            l_ret += '<ul>'
            for file in zip_files:
                l_ret += '<li>%s</li>' % file
            l_ret += '</ul>'
            l_ret += '</div>'

user_draft = context.getMySelf().getPreviousActor(str(int(workitem_id) - 2))

l_ret += """
</ol>

<p>
The above-mentioned files were submitted by user: %s (%s)
</p>

<p><em>
This confirmation is electronically generated by the Reportnet system and therefore not signed.
</em></p>

<p>%s</p>
""" % (user_draft, context.getLDAPUserCanonicalName(context.getLDAPUser(user_draft)), DateTime().strftime('%d %B %Y'))

context.getMySelf().manage_addFeedback(title="Confirmation of receipt",
                                       feedbacktext=l_ret, automatic=1, content_type='text/html')
context.getMySelf().completeWorkitem(workitem_id)
